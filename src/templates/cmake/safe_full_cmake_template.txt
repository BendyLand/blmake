# Minimum CMake version
cmake_minimum_required(VERSION <CMake_Version>)

# Project metadata
project(<Project_Name> VERSION <Project_Version>)

# Specify the C++ standard
set(CMAKE_CXX_STANDARD <C++_Standard>)
set(CMAKE_CXX_STANDARD_REQUIRED <ON/OFF>)

# Define build type
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE <Build_Type>)
endif()

# Compiler options
set(CMAKE_CXX_COMPILER "<Compiler>")

# Include directories
include_directories(${CMAKE_SOURCE_DIR}/<Include_Path>)

# Source files
set(SOURCE_FILES
    <Source_File1>
    <Source_File2>
    ...
)

# Output directories
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_SOURCE_DIR}/<Build_Output_Path>)

# Compilation flags
set(COMPILATION_FLAGS "<Compilation_Flags>")
if(CMAKE_BUILD_TYPE STREQUAL "<Debug_Type>")
    set(COMPILATION_FLAGS "<Debug_Compilation_Flags>")
endif()

# Add executable
add_executable(<Executable_Name> ${SOURCE_FILES})

# Apply compilation flags
target_compile_options(<Executable_Name> PRIVATE ${COMPILATION_FLAGS})

# Link libraries
target_link_libraries(<Executable_Name> PRIVATE <Libraries>)

# Custom linker paths
link_directories(${CMAKE_SOURCE_DIR}/<Library_Directory>)

# Pre-build and post-build hooks
add_custom_command(TARGET <Executable_Name> PRE_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "Running pre-build script..."
    COMMAND bash ${CMAKE_SOURCE_DIR}/<Pre_Build_Script>
)

add_custom_command(TARGET <Executable_Name> POST_BUILD
    COMMAND ${CMAKE_COMMAND} -E echo "Running post-build script..."
    COMMAND bash ${CMAKE_SOURCE_DIR}/<Post_Build_Script>
)
